var documenterSearchIndex = {"docs":
[{"location":"training/#Training-pipeline","page":"Training","title":"Training pipeline","text":"","category":"section"},{"location":"training/","page":"Training","title":"Training","text":"Data parallel training happens over several GPUs which themselves may be spread across sevral nodes. While there are several architectures proposed for high throughput and fast training of neural networks with a large amount of data, it is out of scope for this document. Here we will focus on the tooling necessary to achieve training over several GPUs and the API.","category":"page"},{"location":"training/#Syncing-Gradients","page":"Training","title":"Syncing Gradients","text":"","category":"section"},{"location":"training/","page":"Training","title":"Training","text":"ResNetImageNet.syncgrads","category":"page"},{"location":"training/#ResNetImageNet.syncgrads","page":"Training","title":"ResNetImageNet.syncgrads","text":"syncgrads(inputchannels, outputchannels; verbose = false)\n\nStarts a task to monitor all the input_channels to receive a signal and performs synchronisation of all the terms in the input channels.\n\nThe gradients from these channels are expected to be of the form of a NamedTuple as produced by Zygote. A typical example would be\n\njulia> resnet = ResNet(); # from Metalhead.jl or could be any model we wish to train\n\njulia> using Zygote\n\njulia> gs, _ = gradient(resnet, rand(Float32, 224, 224, 3, 1)) do m, x\n         sum(m(x))\n       end;\n\ngs is what would be sent in the channels from every worker.\n\nAll the input channels are expected to be started at the remote processes with a size 1 so only one gradient may be published at one time. The output channels are similar with the channel being started on the process where the sync in expected to happen.\n\nTypical configuration would look like:\n\ninput_channels = (RemoteChannel(() -> Channel(1), p) for p in workers())\noutput_channels = (RemoteChannel(() -> Channel(1), 1) for p in workers())\n\nSet verbose = true to get more detailed information as the synchronisation happens.\n\n\n\n\n\n","category":"function"},{"location":"training/","page":"Training","title":"Training","text":"Note that syncgrads currently requires serialization of gradients from every device with every iteration of the data loader. This is inefficient and has been surpassed with techniques involving \"data layers\" such as Nvidia NCCL or UCX which work to perform reduction over several GPUs in a better optimised manner. This is under developement in the Julia ecosystem as well.","category":"page"},{"location":"training/#High-Level-training-pipeline","page":"Training","title":"High Level training pipeline","text":"","category":"section"},{"location":"training/","page":"Training","title":"Training","text":"A basic pipeline would look very similar to how Flux.train! functions. We need a cost function, some data and parameters and we are off to the races. There are some subtlties however. Rather than using the gradients that every copy of the model produces with the data it used, data parallel training does not directly use these gradients. Instead, the gradients from every model have to be reduced together to average it out to get the effect of training over all the data used to perform a single training step. This amounts to:","category":"page"},{"location":"training/","page":"Training","title":"Training","text":"# state => state of optimiser\n# model => model to be trained\n# opt => optimiser\n# data => collection of data\nfor d in data\n  x, y = d  # x => input data, y => labels\n  gs = gradient(model) do m\n    loss(m(x), y)\n  end\n\n  # note the pseudo code call in the next line\n  @synchronize_gradients_over_all_GPUs\n  model, state = opt(model, updated_grads, state)\nend","category":"page"},{"location":"training/","page":"Training","title":"Training","text":"This looks very similar to the typical supervised learning training loop from Flux.","category":"page"},{"location":"training/","page":"Training","title":"Training","text":"In fact, it is! With the addition of the synchrnisation part, we can also extend it to several forms of semi-supervised and unsupervised learning scenarios. This is part of the future work of this pacakge, and something actively being researched in the Julia community and elsewhere.","category":"page"},{"location":"training/","page":"Training","title":"Training","text":"ResNetImageNet.start","category":"page"},{"location":"training/#ResNetImageNet.start","page":"Training","title":"ResNetImageNet.start","text":"start(loss, data_tree, key, model,\n      input_channels, output_channels;\n      class_idx,\n      verbose = false,\n      opt_args = (),\n      opt = Optimisers.ADAM(),\n      kwargs...)\n\nThe high level function that performs training of the model over the specified data and configuration.\n\nloss: Typical loss function used to optimise the model with the data. It is fed all the data that every iteration of a DataLaader produces, such that the first element of the produced data is first send to the model. The calling signature of the loss looks like:\nx, y, z... = iterate(dataloader)   loss(model(x), y, z...)\ndata_tree: the data tree that one would associate with a dataset described by DataSets.dataset.\nkey: the key  to the training data. Typically the LOC_train__solutions.csv` for the case of ILSVRC.\nmodel: model to be trained\ninputchannels, outputchannels: See syncgrad for details\n\nKeyword Arguments:\n\nThis is a non-exhaustive list of keyword arguments currently supported.\n\nclass_idx: a list of the labels to be trained on, a Vector, or Base.OneTo\no: The type of optimiser to use. Optimisers.jl provides a number of supported optimisers.\nopt_args: A tuple containing arguments to the optimiser as described by o\nopt: The output of o(opt_args...). Useful to provide initial optimisers. Can also be associated with schedulers and decays as required.\ncycles: the number of times the dataset is sampled in a single call to start.\nbatchsize: the number of observations per batch per GPU.\nnsamples: The number of datapoints to be sampled at once. This subset of data is loaded by every process independently and creates a DataLoader from it.\nsts: A vector of length nworkers() which each contain the current state of the optimiser. This is initialised as [Optimisers.state(opt, model) for _ in workers()]\nsaveweights: Defaults to false, set to true to save training checkpoints\nvals: A vector of validation sets to be used as validation sets while training. These also add logging statements while training. Disable with (and defaults to) [nothing for _ in workers()]. \nworkers: A list of processes used to train the model\ndevices: A DeviceSet() or iterable of Device(); used to target the GPU used to train.\nverbose: Defaults to false. Set to true to enable logging of helpful information while debugging and training.\n\n\n\n\n\n","category":"function"},{"location":"#Data-Parallel-Training-for-Flux-models","page":"Home","title":"Data Parallel Training for Flux models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Training large deep learning models over several nodes and architectures is required to efficiently scale training of larger number of parameters that cannot reasonbly be trained in a single machine or node.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package includes tools necessary to efficiently scale and train deep learning models with high throughput.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package includes a setup and configuration environment in bin/driver.jl which can be tweaked depending on the needs.","category":"page"},{"location":"datasets/#DataSets","page":"Datasets","title":"DataSets","text":"","category":"section"},{"location":"datasets/","page":"Datasets","title":"Datasets","text":"DataSets needed to train large neural networks in a distributed fashion also require the data be highly available over the network. It is also desirable to have access to the dataset from a local filesystem for testing, debugging etc.","category":"page"},{"location":"datasets/","page":"Datasets","title":"Datasets","text":"This is done via the DataSets.jl package which includes abstractions over how the data is loaded, indexed and found over several backends, including tree-like structures (local filesystems) or hosted over the network (such as in Amazon S3 buckets).","category":"page"},{"location":"datasets/","page":"Datasets","title":"Datasets","text":"Using DataSets.jl we can represent a data storage driver which can be used to perform tasks such downloading and encoding etc with a shared API across backends. This package also includes a Data.toml which describes the ImageNet dataset used to train our models. This may be swapped out for a different dataset as needed.","category":"page"},{"location":"datasets/","page":"Datasets","title":"Datasets","text":"ResNetImageNet.minibatch\nResNetImageNet.train_solutions\nResNetImageNet.labels\nResNetImageNet.topkaccuracy\nResNetImageNet.showpreds","category":"page"}]
}
